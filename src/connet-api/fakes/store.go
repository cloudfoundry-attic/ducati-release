// This file was generated by counterfeiter
package fakes

import (
	"connet-api/models"
	"connet-api/store"
	"sync"
)

type Store struct {
	CreateStub        func(route models.Route) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		route models.Route
	}
	createReturns struct {
		result1 error
	}
	AllStub        func() ([]models.Route, error)
	allMutex       sync.RWMutex
	allArgsForCall []struct{}
	allReturns     struct {
		result1 []models.Route
		result2 error
	}
}

func (fake *Store) Create(route models.Route) error {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		route models.Route
	}{route})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(route)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *Store) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *Store) CreateArgsForCall(i int) models.Route {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].route
}

func (fake *Store) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *Store) All() ([]models.Route, error) {
	fake.allMutex.Lock()
	fake.allArgsForCall = append(fake.allArgsForCall, struct{}{})
	fake.allMutex.Unlock()
	if fake.AllStub != nil {
		return fake.AllStub()
	} else {
		return fake.allReturns.result1, fake.allReturns.result2
	}
}

func (fake *Store) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *Store) AllReturns(result1 []models.Route, result2 error) {
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 []models.Route
		result2 error
	}{result1, result2}
}

var _ store.Store = new(Store)
